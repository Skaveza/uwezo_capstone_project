import os
import json
import random
from datetime import datetime, timedelta

# Paths
repaired_folder = "data/repaired_labels"
merged_folder = "data/merged_labels"
os.makedirs(merged_folder, exist_ok=True)

# Synthetic ranges
BALANCE_RANGE = (1000, 50000)
TRANSACTION_RANGE = (100, 5000)
ACCOUNT_RANGE = (1000000000, 9999999999)
START_DATE = datetime(2023, 1, 1)
END_DATE = datetime(2024, 12, 31)

def random_date(start=START_DATE, end=END_DATE):
    delta = end - start
    random_days = random.randint(0, delta.days)
    return (start + timedelta(days=random_days)).strftime("%Y-%m-%d")

filled_count = 0
merged_summary = []

for file in os.listdir(repaired_folder):
    if not file.endswith(".json"):
        continue

    path = os.path.join(repaired_folder, file)
    with open(path, "r") as f:
        data = json.load(f)

    # Fill missing or null fields with synthetic values
    for key in data.keys():
        if not data[key] or str(data[key]).lower() == "null":
            if key in ["opening_balance", "closing_balance"]:
                data[key] = round(random.uniform(*BALANCE_RANGE), 2)
            elif key in ["total_credit", "total_debit"]:
                data[key] = round(random.uniform(*TRANSACTION_RANGE), 2)
            elif key == "account_number":
                data[key] = str(random.randint(*ACCOUNT_RANGE))
            elif key == "trans_date":
                data[key] = random_date()
            filled_count += 1

    merged_summary.append(data)
    # Save merged JSON
    with open(os.path.join(merged_folder, file), "w") as f:
        json.dump(data, f, indent=4)

print(f" Synthetic merging complete. Filled {filled_count} missing fields.")
print(f" Merged dataset saved to '{merged_folder}'")
